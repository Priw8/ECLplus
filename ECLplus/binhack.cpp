#include "pch.h"
#include "ECLplus.h"
#include "binhack.h"

static CONST UCHAR binhackNop10[] = { 0x66, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00 };

static CONST UCHAR binhackInsCall[] = { 0x52, 0x57, 0xA1, 0xE8, 0x9F, 0x49, 0x00, 0xFF, 0xD0, 0xB8, 0xF2, 0x65, 0x42, 0x00, 0xFF, 0xE0 };
static CONST UCHAR binhackInsCallJump[] = { 0x0F, 0x87, 0x09, 0x8D, 0x07, 0x00 };

static CONST UCHAR binhackIntVar[] = { 0x6A, 0x00, 0x52, 0x50, 0xA1, 0xE4, 0x9F, 0x49, 0x00, 0xFF, 0xD0, 0x8B, 0xE5, 0x5D, 0xC2, 0x04, 0x00 };
static CONST UCHAR binhackIntVarJump[] = { 0x0F, 0x87, 0xA0, 0x29, 0x07, 0x00 };

static CONST UCHAR binhackIntVarAddr[] = { 0x6A, 0x01, 0x52, 0x83, 0xC0, 0x0F, 0x50, 0xA1, 0xE4, 0x9F, 0x49, 0x00, 0xFF, 0xD0, 0x5E, 0x5D, 0xC2, 0x04, 0x00 };
static CONST UCHAR binhackIntVarAddrJump[] = { 0x0F, 0x87, 0xE4, 0x21, 0x07, 0x00 };

static CONST UCHAR binhackEnmDamage[] = { 0xE8, 0x9D, 0x11, 0xFB, 0xFF, 0x03, 0x83, 0x54, 0x3F, 0x00, 0x00, 0xC7, 0x83, 0x54, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBE, 0x1A, 0xFA, 0x41, 0x00, 0xFF, 0xE6 };
static CONST UCHAR binhackEnmDamageJump[] = { 0xE9, 0xD4, 0xA4, 0x07, 0x00 };

static CONST UCHAR binhackMainLoop[] = { 0x89, 0x8D, 0x8C, 0xDD, 0xFF, 0xFF, 0x60, 0xFF, 0x15, 0xE0, 0x9F, 0x49, 0x00, 0x61, 0xE9, 0xC7, 0x73, 0xFC, 0xFF };
static CONST UCHAR binhackMainLoopJump[] = { 0xE9, 0x27, 0x8C, 0x03, 0x00, 0x90 };

CONST BINHACK binhacks[] = {
    {
        INS_SWITCH_CODECAVE,
        binhackInsCall,
        sizeof(binhackInsCall)
    },
    {
        INS_SWITCH_JUMP,
        binhackInsCallJump,
        sizeof(binhackInsCallJump)
    },
    {
        INTVAR_VAL_SWITCH_CODECAVE,
        binhackIntVar,
        sizeof(binhackIntVar)
    },
    {
        INTVAR_VAL_SWITCH_JUMP,
        binhackIntVarJump,
        sizeof(binhackIntVarJump)
    },
    {
        INTVAR_ADDR_SWITCH_CODECAVE,
        binhackIntVarAddr,
        sizeof(binhackIntVarAddr)
    },
    {
        INTVAR_ADDR_SWITCH_JUMP,
        binhackIntVarAddrJump,
        sizeof(binhackIntVarAddrJump)
    },
    {
        ENMDMG_CODECAVE,
        binhackEnmDamage,
        sizeof(binhackEnmDamage)
    },
    {
        ENMDMG_JUMP,
        binhackEnmDamageJump,
        sizeof(binhackEnmDamageJump)
    },
    {
        PLAYER_DAMAGE_NOP,
        binhackNop10,
        sizeof(binhackNop10)
    },
    {
        MAINLOOP_CODECAVE,
        binhackMainLoop,
        sizeof(binhackMainLoop)
    },
    {
        MAINLOOP_JUMP,
        binhackMainLoopJump,
        sizeof(binhackMainLoopJump)
    },
    /* Sentinel */
    { 0, 0, 0 }
};
