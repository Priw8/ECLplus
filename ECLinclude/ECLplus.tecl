/*
* Redistribution and use in source and binary forms, with or without modification,
* are permitted provided that the following conditions are met:
*
* 1. Redistributions of source code must retain this list of conditions and the following disclaimer.
* 2. Redistributions in binary form must reproduce this list of conditions and the following disclaimer
*    in the documentation and/or other materials provided with the distribution.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
* OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
* AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
* OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
* OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
* LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#eclmap "ECLplus.eclm"

insdef void msgf(string format, ...) = 2000;
insdef void printf(string format, ...) = 2001;
insdef void cls() = 2002;
insdef void drawf(float xPos, float yPos, string format, ...) = 2003;
insdef void drawColor(int color) = 2004;
insdef void playMusic(string name) = 2005;
insdef void exit() = 2006;
insdef void itemSpeed(float speed) = 2007;
insdef void spellSetCapture(int state) = 2008;
insdef void spellSetBonus(int maxBonus) = 2009;
insdef void spellSetBonusNow(int currBonus) = 2010;
insdef void drawFont(int fontType) = 2011;
insdef void drawAnchor(int anchorX, int anchorY) = 2012;
insdef void drawReset() = 2013;
insdef void drawShadow(int state) = 2014;
insdef int addri(int intVar) = 2015;
insdef int addrf(int floatVar) = 2016;
insdef int derefi(int intVarAddr) = 2017;
insdef float dereff(int floatVarAddr) = 2018;
insdef void writei(int intVarAddr, int val) = 2019;
insdef void writef(int floatVarAddr, float val) = 2020;
insdef void playSoundPos(int id, float pos) = 2021;

insdef void playerPos(float x, float y) = 2100;
insdef void playerKill() = 2101;
insdef void playerBomb() = 2102;
insdef void playerSetLives(int amount) = 2103;
insdef void playerSetBombs(int amount) = 2104;
insdef void playerSetPower(int amount) = 2105;
insdef void playerSetIframes(int duration) = 2106;
insdef void playerAllowShot(int state) = 2107;
insdef void playerAllowBomb(int state) = 2108;
insdef void playerSetHyperTimer(int state) = 2109;
insdef void playerSetDamageMult(float mult) = 2110;
insdef void playerSetSpeedMult(float mult) = 2111;

insdef void msgResetAll() = 2200;
insdef void msgReset(int channel) = 2201;
insdef void msgSend(float a, float b, float c, float d, int channel) = 2202;
insdef void msgReceive(int received, float a, float b, float c, float d, int channel) = 2203;
insdef void msgPeek(int received, float a, float b, float c, float d, int channel) = 2204;
insdef void msgCheck(int received, int channel) = 2205;

insdef void enmClosest(int varId, float varDist, float x, float y) = 2210;
insdef void enmDamage(int id, int dmg, int...) = 2211;
insdef void enmDamageIter(int iter, int dmg, int...) = 2212;
insdef void enmDamageRad(int varCnt, float x, float y, float r, int maxCnt, int dmg, int...) = 2213;
insdef void enmDamageRect(int varCnt, float x, float y, float w, float h, int maxCnt, int dmg, int...) = 2214;
insdef void enmIterate(int varIterator, int prevIterator) = 2215;
insdef void enmIdIter(int varId, int iterator) = 2216;
insdef void enmIterId(int varIter, int id) = 2217;
insdef void enmFlag(int varFlag, int id) = 2218;
insdef void enmFlagIter(int varFlag, int iterator) = 2219;
insdef void enmLife(int varLife, int id) = 2220;
insdef void enmLifeIter(int varLife, int iterator) = 2221;
insdef void enmPosIter(float x, float y, int iterator) = 2222;
insdef void enmBombInvuln(float varInvuln, int id) = 2223;
insdef void enmBombInvulnIter(float varInvuln, int iterator) = 2224;
insdef void enmDamageRectRot(int varCnt, float x, float y, float w, float h, float rot, int maxCnt, int dmg, int...) = 2225;

insdef int dataNewArr(int length) = 2300;
insdef int dataNewMap() = 2301;
insdef int dataCopy(int hStruct) = 2302;
insdef int dataCopyDeep(int hStruct) = 2303;
insdef void dataDelete(int hStruct) = 2304;
insdef void dataDeleteDeep(int hStruct) = 2305;
insdef void dataDeleteEnm(int enmId) = 2306;

insdef void dataArrSetInt(int hStruct, int index, int val) = 2307;
insdef void dataArrSetFloat(int hStruct, int index, float val) = 2308;
insdef void dataArrSetHandle(int hStruct, int index, int hStructVal) = 2309;
insdef void dataArrPushInt(int hStruct, int val) = 2310;
insdef void dataArrPushFloat(int hStruct, float val) = 2311;
insdef void dataArrPushHandle(int hStruct, int hStructVal) = 2312;
insdef void dataArrPrependInt(int hStruct, int val) = 2313;
insdef void dataArrPrependFloat(int hStruct, float val) = 2314;
insdef void dataArrPrependHandle(int hStruct, int hStructVal) = 2315;
insdef void dataArrSplice(int hStruct, int index, int cnt) = 2316;
insdef void dataArrResize(int hStruct, int newSize) = 2317;

insdef void dataMapSetInt(int hStruct, int key, int val) = 2318;
insdef void dataMapSetFloat(int hStruct, int key, float val) = 2319;
insdef void dataMapSetHandle(int hStruct, int key, int hStructVal) = 2320;
insdef void dataMapDelete(int hStruct, int key) = 2321;

insdef int dataType(int hStruct) = 2322;

insdef int dataArrGetType(int hStruct, int index) = 2323;
insdef int dataArrPopInt(int hStruct) = 2324;
insdef float dataArrPopFloat(int hStruct) = 2325;
insdef int dataArrPopHandle(int hStruct) = 2326;
insdef int dataArrGetInt(int hStruct, int index) = 2327;
insdef float dataArrGetFloat(int hStruct, int index) = 2328;
insdef int dataArrGetHandle(int hStruct, int index) = 2329;
insdef int dataArrGetLength(int hStruct) = 2330;

insdef int dataMapExists(int hStruct, int key) = 2331;
insdef int dataMapGetType(int hStruct, int key) = 2332;
insdef int dataMapGetInt(int hStruct, int key) = 2333;
insdef float dataMapGetFloat(int hStruct, int key) = 2334;
insdef int dataMapGetHandle(int hStruct, int key) = 2335;

inline void msgWait(int channel) {
	int received = false;
	goto BEGIN;
LOOP:
	wait(1);
BEGIN:
	msgCheck(received, channel);
	unless (received) goto LOOP;
}

inline void ECLplusReset() {
	msgResetAll();
	playerAllowShot(1);
	playerAllowBomb(1);
	GI4 = 0;
	GI5 = 0;
	GI6 = 0;
	GI7 = 0;
}

global KEY_SHOOT = 0x1;
global KEY_BOMB = 0x2;
global KEY_FOCUS = 0x8;
global KEY_UP = 0x10;
global KEY_DOWN = 0x20;
global KEY_LEFT = 0x40;
global KEY_RIGHT = 0x80;
global KEY_C = 0x200;

global PL_DYING = 4;
global PL_DEAD = 2;
global PL_NORMAL = 1;
global PL_RESPAWN = 0;

global ANCHOR_CENTER = 0;
global ANCHOR_LEFT = 1;
global ANCHOR_RIGHT = 2;
global ANCHOR_TOP = 1;
global ANCHOR_BOTTOM = 2;

global DATAVALUE_INVALID = 0;
global DATAVALUE_INT = 1;
global DATAVALUE_FLOAT = 2;
global DATAVALUE_HANDLE = 3;
